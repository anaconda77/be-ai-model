name: Deploy Listener to OCI VM

on:
  # 'main' 브랜치로 push(merge)가 발생했을 때
  push:
    branches: [ "main" ]
  # 'main' 브랜치로 향하는 Pull Request가 생성되거나 업데이트될 때
  pull_request:
    branches: [ "main" ]

jobs:
  # CI Job: Pull Request 시에만 실행되는 코드 검증 작업
  ci:
    name: CI - Lint & Test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./scripts

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install Dependencies
        # 이 저장소의 requirements.txt를 기반으로 설치
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt # <-- 이 저장소의 requirements.txt 경로
      
      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # CD Job: main 브랜치에 Push(Merge) 시에만 실행되는 배포 작업
  deploy:
    name: CD - Deploy to OCI VM
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to VM via SSH
        # SSH 접속 및 원격 명령어 실행을 위한 인기있는 Action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.OCI_VM_HOST }}
          username: ${{ secrets.OCI_VM_USERNAME }}
          key: ${{ secrets.OCI_VM_SSH_KEY }}
          port: 22

          # 아래 script 부분이 OCI VM에 접속해서 실제로 실행할 명령어들입니다.
          script: |
            # 1. 프로젝트 폴더로 이동합니다.
            cd ${{ secrets.VM_PROJECT_PATH }}
            pip3 install -r requirements.txt
            
            # 2. main 브랜치의 최신 코드를 받아옵니다.
            git pull origin main

            # 3. listener.py가 있는 곳으로 이동
            cd /scripts
            
            # 4. 리스너 서비스를 재시작하여 변경된 코드를 적용합니다.
            sudo systemctl restart model_listener.service
            
            # 5. 서비스가 정상적으로 재시작되었는지 상태를 확인합니다. (로그에 남김)
            sudo systemctl status model_listener.service