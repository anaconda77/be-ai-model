name: Deploy Listener to OCI VM

on:
  # 'main' 브랜치로 push(merge)가 발생했을 때
  push:
    branches: [ "main" ]
  # 'main' 브랜치로 향하는 Pull Request가 생성되거나 업데이트될 때
  pull_request:
    branches: [ "main" ]

jobs:
  # CI Job: Pull Request 시에만 실행되는 코드 검증 작업
  ci:
    name: CI - Lint & Test
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 1.8.2 # pyproject.toml에 명시된 버전과 일치
          virtualenvs-create: true
          virtualenvs-in-project: true
      
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install Dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      
      - name: Lint with flake8
        run: |
          poetry run pip install flake8
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics

  # CD Job: main 브랜치에 Push(Merge) 시에만 실행되는 배포 작업
  deploy:
    name: CD - Deploy to OCI VM
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Copy source files to OCI VM
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.OCI_VM_HOST }}
          username: ${{ secrets.OCI_VM_USERNAME }}
          key: ${{ secrets.OCI_VM_SSH_KEY }}
          port: 22
          source: "./"
          target: ${{ secrets.VM_PROJECT_PATH }}
      
      - name: Restart service via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.OCI_VM_HOST }}
          username: ${{ secrets.OCI_VM_USERNAME }}
          key: ${{ secrets.OCI_VM_SSH_KEY }}
          port: 22
          script: |
            cd ${{ secrets.VM_PROJECT_PATH }}

            cat > .env << EOF
            SUPABASE_URL='${{ secrets.SUPABASE_URL }}'
            SUPABASE_KEY='${{ secrets.SUPABASE_KEY }}'
            FINNHUB_API_KEY='${{ secrets.FINNHUB_API_KEY }}'
            TIINGO_API_KEY='${{ secrets.TIINGO_API_KEY }}'
            EOF
            
            echo ".env file created successfully on the server."

            /home/ubuntu/.local/bin/poetry install --no-interaction
            sudo systemctl restart model_listener.service
            sudo systemctl status model_listener.service